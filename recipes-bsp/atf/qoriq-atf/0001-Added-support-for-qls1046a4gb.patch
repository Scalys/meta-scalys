From 13e576ca729c15e3ac0a152f9b27ace64128d3e6 Mon Sep 17 00:00:00 2001
From: Siarhei Yasinski <siarhei.yasinski@sintecs.eu>
Date: Wed, 8 Nov 2023 08:13:34 +0000
Subject: [PATCH] Added support for qls1046a4gb

Signed-off-by: Siarhei Yasinski <siarhei.yasinski@sintecs.eu>
---
 plat/nxp/soc-ls1046a/qls1046a4gb/ddr_init.c   | 190 ++++++++++++++++++
 plat/nxp/soc-ls1046a/qls1046a4gb/plat_def.h   |  79 ++++++++
 plat/nxp/soc-ls1046a/qls1046a4gb/platform.c   |  28 +++
 plat/nxp/soc-ls1046a/qls1046a4gb/platform.mk  |  37 ++++
 .../soc-ls1046a/qls1046a4gb/platform_def.h    |  13 ++
 plat/nxp/soc-ls1046a/qls1046a4gb/policy.h     |  16 ++
 6 files changed, 363 insertions(+)
 create mode 100644 plat/nxp/soc-ls1046a/qls1046a4gb/ddr_init.c
 create mode 100644 plat/nxp/soc-ls1046a/qls1046a4gb/plat_def.h
 create mode 100644 plat/nxp/soc-ls1046a/qls1046a4gb/platform.c
 create mode 100644 plat/nxp/soc-ls1046a/qls1046a4gb/platform.mk
 create mode 100644 plat/nxp/soc-ls1046a/qls1046a4gb/platform_def.h
 create mode 100644 plat/nxp/soc-ls1046a/qls1046a4gb/policy.h

diff --git a/plat/nxp/soc-ls1046a/qls1046a4gb/ddr_init.c b/plat/nxp/soc-ls1046a/qls1046a4gb/ddr_init.c
new file mode 100644
index 000000000..9f8d800e8
--- /dev/null
+++ b/plat/nxp/soc-ls1046a/qls1046a4gb/ddr_init.c
@@ -0,0 +1,190 @@
+/*
+ * Copyright 2018-2022 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#include <assert.h>
+#include <errno.h>
+#include <string.h>
+
+#include <common/debug.h>
+#include <ddr.h>
+#include <lib/utils.h>
+
+#include <errata.h>
+#include <platform_def.h>
+
+#ifdef CONFIG_STATIC_DDR
+const struct ddr_cfg_regs static_2100 = {
+	.cs[0].config 	= 0x80440412,
+	.cs[0].bnds 	= 0xFF,
+	.sdram_cfg[0] 	= 0x65000000,
+	.sdram_cfg[1] 	= 0x00401150,
+	.sdram_cfg[2] 	= 0x00,
+	.timing_cfg[0] 	= 0xD1770018,
+	.timing_cfg[1] 	= 0xF2FC9265,
+	.timing_cfg[2] 	= 0x005941A0,
+	.timing_cfg[3] 	= 0x02161100,
+	.timing_cfg[4] 	= 0x00220002,
+	.timing_cfg[5] 	= 0x05401400,
+	.timing_cfg[6] 	= 0x00,
+	.timing_cfg[7] 	= 0x26600000,
+	.timing_cfg[8] 	= 0x05446A00,
+	.timing_cfg[9] 	= 0x00,
+	.dq_map[0] 		= 0x475953A4,
+	.dq_map[1] 		= 0x2D2C55BC,
+	.dq_map[2] 		= 0x0F2BD460,
+	.dq_map[3] 		= 0x90BA8000,
+	.sdram_mode[0] 	= 0x03010631,
+	.sdram_mode[1] 	= 0x00100200,
+	.sdram_mode[8] 	= 0x0500,
+	.sdram_mode[9] 	= 0x08000000,
+	.md_cntl 		= 0x0600081F,
+	.interval 		= 0x0FFF03FF,
+	.data_init 		= 0xDEADBEEF,
+	.clk_cntl 		= 0x02800000,
+	.init_addr 		= 0x00,
+	.init_ext_addr 	= 0x00,
+	.zq_cntl 		= 0x8A090705,
+	.wrlvl_cntl[0] 	= 0xC675F606,
+	.wrlvl_cntl[1] 	= 0x06060707,
+	.wrlvl_cntl[2] 	= 0x07060606,
+	.cdr[0] 		= 0x80080000,
+	.cdr[1] 		= 0xA180,
+	.err_disable 	= 0x00,
+	.err_int_en 	= 0x00,
+};
+
+long long board_static_ddr(struct ddr_info *priv)
+{
+	memcpy(&priv->ddr_reg, &static_2100, sizeof(static_2100));
+
+	return 0x100000000ULL;
+}
+#else /* ifndef CONFIG_STATIC_DDR */
+static const struct rc_timing rcz[] = {
+	{U(1600), U(8), U(7)},
+	{U(2100), U(8), U(7)},
+	{}
+};
+
+static const struct board_timing ram[] = {
+	/* rc, rc_timing, add1, add2 */
+	{U(0x1f), rcz, U(0x00010100), U(0x01000000)},
+};
+
+int ddr_board_options(struct ddr_info *priv)
+{
+	int i;
+	int ret;
+	struct memctl_opt *popts = &priv->opt;
+
+	ret = cal_board_params(priv, ram, ARRAY_SIZE(ram));
+	if (ret != 0) {
+		return ret;
+	}
+
+	for (i = 0; i < DDRC_NUM_CS; i++) {
+		popts->cs_odt[i].odt_wr_cfg = 4;
+		popts->cs_odt[i].odt_rd_cfg = 4;
+	}
+
+	popts->wrlvl_override = 1;
+	popts->wrlvl_sample = 0xf; /* 15 clocks */
+
+	popts->half_strength_drive_en = 0;
+	popts->cpo_sample = 0x47;
+	popts->ddr_cdr1 = DDR_CDR1_DHC_EN | DDR_CDR1_ODT(DDR_CDR_ODT_60ohm);
+	popts->ddr_cdr2 = DDR_CDR2_ODT(DDR_CDR_ODT_60ohm) |
+		DDR_CDR2_VREF_OVRD(70); /* Vref = 70% */
+
+	popts->rtt_override = 0;
+
+	return 0;
+}
+
+/* DDR model number:  MT40A512M16JY-083E:B */
+struct dimm_params ddr_raw_timing = {
+		.n_ranks = U(1),
+		.rank_density = ULL(4294967296),
+		.capacity = ULL(4294967296),
+		.primary_sdram_width = U(64),
+		.ec_sdram_width = U(8),
+		.rdimm = U(0),
+		.mirrored_dimm = U(0),
+		.n_row_addr = U(16),
+		.n_col_addr = U(10),
+		.bank_group_bits = U(1),
+		.edc_config = U(2),
+		.burst_lengths_bitmask = U(0x0c),
+		.tckmin_x_ps = 750,
+		.tckmax_ps = 1900,
+		.caslat_x = U(0x0001FFE00),
+		.taa_ps = 13500,
+		.trcd_ps = 13500,
+		.trp_ps = 13500,
+		.tras_ps = 33000,
+		.trc_ps = 46500,
+		.twr_ps = 15000,
+		.trfc1_ps = 350000,
+		.trfc2_ps = 260000,
+		.trfc4_ps = 160000,
+		.tfaw_ps = 30000,
+		.trrds_ps = 5300,
+		.trrdl_ps = 6400,
+		.tccdl_ps = 5355,
+		.refresh_rate_ps = U(7800000),
+		.dq_mapping[0] = U(0x0),
+		.dq_mapping[1] = U(0x0),
+		.dq_mapping[2] = U(0x0),
+		.dq_mapping[3] = U(0x0),
+		.dq_mapping[4] = U(0x0),
+		.dq_mapping_ors = U(0),
+		.rc = U(0x1f),
+};
+
+int ddr_get_ddr_params(struct dimm_params *pdimm, struct ddr_conf *conf)
+{
+	static const char dimm_model[] = "Fixed DDR on board";
+
+	conf->dimm_in_use[0] = 1;
+	memcpy(pdimm, &ddr_raw_timing, sizeof(struct dimm_params));
+	memcpy(pdimm->mpart, dimm_model, sizeof(dimm_model) - 1);
+
+	return 1;
+}
+#endif /* ifdef CONFIG_STATIC_DDR */
+
+long long init_ddr(void)
+{
+	int spd_addr[] = {NXP_SPD_EEPROM0};
+	struct ddr_info info;
+	struct sysinfo sys;
+	long long dram_size;
+
+	zeromem(&sys, sizeof(sys));
+	if (get_clocks(&sys)) {
+		ERROR("System clocks are not set\n");
+		assert(0);
+	}
+	debug("platform clock %lu\n", sys.freq_platform);
+	debug("DDR PLL1 %lu\n", sys.freq_ddr_pll0);
+	debug("DDR PLL2 %lu\n", sys.freq_ddr_pll1);
+
+	zeromem(&info, sizeof(struct ddr_info));
+	info.num_ctlrs = 1;
+	info.dimm_on_ctlr = 1;
+	info.clk = get_ddr_freq(&sys, 0);
+	info.spd_addr = spd_addr;
+	info.ddr[0] = (void *)NXP_DDR_ADDR;
+
+	dram_size = dram_init(&info);
+	if (dram_size < 0) {
+		ERROR("DDR init failed.\n");
+	}
+
+	erratum_a008850_post();
+
+	return dram_size;
+}
diff --git a/plat/nxp/soc-ls1046a/qls1046a4gb/plat_def.h b/plat/nxp/soc-ls1046a/qls1046a4gb/plat_def.h
new file mode 100644
index 000000000..b5e66aeaa
--- /dev/null
+++ b/plat/nxp/soc-ls1046a/qls1046a4gb/plat_def.h
@@ -0,0 +1,79 @@
+/*
+ * Copyright 2018-2022 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef PLAT_DEF_H
+#define PLAT_DEF_H
+
+#include <arch.h>
+/*
+ * Required without TBBR.
+ * To include the defines for DDR PHY Images.
+ */
+#include <tbbr_img_def.h>
+
+#include "policy.h"
+#include <soc.h>
+
+#define NXP_SPD_EEPROM0		0x51
+
+#define NXP_SYSCLK_FREQ		100000000
+#define NXP_DDRCLK_FREQ		100000000
+
+/* UART related definition */
+#define NXP_CONSOLE_ADDR	NXP_UART_ADDR
+#define NXP_CONSOLE_BAUDRATE	115200
+
+/* Size of cacheable stacks */
+#if defined(IMAGE_BL2)
+#if defined(TRUSTED_BOARD_BOOT)
+#define PLATFORM_STACK_SIZE	0x2000
+#else
+#define PLATFORM_STACK_SIZE	0x1000
+#endif
+#elif defined(IMAGE_BL31)
+#define PLATFORM_STACK_SIZE	0x1000
+#endif
+
+/* SD block buffer */
+#define NXP_SD_BLOCK_BUF_SIZE	(0x00100000)
+#define NXP_SD_BLOCK_BUF_ADDR	ULL(0x80000000)
+
+#define BL2_LIMIT		(NXP_OCRAM_ADDR + NXP_OCRAM_SIZE)
+
+/* IO defines as needed by IO driver framework */
+#define MAX_IO_DEVICES		U(3)
+#define MAX_IO_BLOCK_DEVICES	U(1)
+#define MAX_IO_HANDLES		U(4)
+
+/*
+ * FIP image defines - Offset at which FIP Image would be present
+ * Image would include Bl31 , Bl33 and Bl32 (optional)
+ */
+#ifdef POLICY_FUSE_PROVISION
+#define MAX_FIP_DEVICES		U(2)
+#endif
+
+#ifndef MAX_FIP_DEVICES
+#define MAX_FIP_DEVICES		U(1)
+#endif
+
+/*
+ * ID of the secure physical generic timer interrupt used by the BL32.
+ */
+#define BL32_IRQ_SEC_PHY_TIMER	29
+
+/*
+ * Define properties of Group 1 Secure and Group 0 interrupts as per GICv3
+ * terminology. On a GICv2 system or mode, the lists will be merged and treated
+ * as Group 0 interrupts.
+ */
+#define PLAT_LS_G1S_IRQ_PROPS(grp) \
+	INTR_PROP_DESC(BL32_IRQ_SEC_PHY_TIMER, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_LEVEL)
+
+#define PLAT_LS_G0_IRQ_PROPS(grp)
+
+#endif /* PLAT_DEF_H */
diff --git a/plat/nxp/soc-ls1046a/qls1046a4gb/platform.c b/plat/nxp/soc-ls1046a/qls1046a4gb/platform.c
new file mode 100644
index 000000000..cef920f8f
--- /dev/null
+++ b/plat/nxp/soc-ls1046a/qls1046a4gb/platform.c
@@ -0,0 +1,28 @@
+/*
+ * Copyright 2020-2022 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#include <plat_common.h>
+
+#pragma weak board_enable_povdd
+#pragma weak board_disable_povdd
+
+bool board_enable_povdd(void)
+{
+#ifdef CONFIG_POVDD_ENABLE
+	return true;
+#else
+	return false;
+#endif
+}
+
+bool board_disable_povdd(void)
+{
+#ifdef CONFIG_POVDD_ENABLE
+	return true;
+#else
+	return false;
+#endif
+}
diff --git a/plat/nxp/soc-ls1046a/qls1046a4gb/platform.mk b/plat/nxp/soc-ls1046a/qls1046a4gb/platform.mk
new file mode 100644
index 000000000..c6b1ec48b
--- /dev/null
+++ b/plat/nxp/soc-ls1046a/qls1046a4gb/platform.mk
@@ -0,0 +1,37 @@
+#
+# Copyright 2018-2022 NXP
+#
+# SPDX-License-Identifier: BSD-3-Clause
+#
+
+# board-specific build parameters
+BOOT_MODE	?=	nor
+BOARD		:=	qls1046a4gb
+POVDD_ENABLE	:=	no
+
+# DDR Compilation Configs
+NUM_OF_DDRC	:=	1
+DDRC_NUM_DIMM	:=	0
+DDRC_NUM_CS	:=	1
+DDR_ECC_EN	:=	yes
+CONFIG_DDR_NODIMM := 1
+CONFIG_STATIC_DDR := 1
+
+# On-Board Flash Details
+NOR_FLASH_SZ	:=	0x2000000
+
+# Platform specific features.
+WARM_BOOT	:=	no
+
+# Adding Platform files build files
+BL2_SOURCES	+=	${BOARD_PATH}/ddr_init.c\
+			${BOARD_PATH}/platform.c
+
+SUPPORTED_BOOT_MODE	:=	nor	\
+				sd	\
+
+# Adding platform board build info
+include plat/nxp/common/plat_make_helper/plat_common_def.mk
+
+# Adding SoC build info
+include plat/nxp/soc-ls1046a/soc.mk
diff --git a/plat/nxp/soc-ls1046a/qls1046a4gb/platform_def.h b/plat/nxp/soc-ls1046a/qls1046a4gb/platform_def.h
new file mode 100644
index 000000000..7f98bb1bc
--- /dev/null
+++ b/plat/nxp/soc-ls1046a/qls1046a4gb/platform_def.h
@@ -0,0 +1,13 @@
+/*
+ * Copyright 2018-2022 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef PLATFORM_DEF_H
+#define PLATFORM_DEF_H
+
+#include <plat_def.h>
+#include <plat_default_def.h>
+
+#endif /* PLATFORM_DEF_H */
diff --git a/plat/nxp/soc-ls1046a/qls1046a4gb/policy.h b/plat/nxp/soc-ls1046a/qls1046a4gb/policy.h
new file mode 100644
index 000000000..c6c325fa8
--- /dev/null
+++ b/plat/nxp/soc-ls1046a/qls1046a4gb/policy.h
@@ -0,0 +1,16 @@
+/*
+ * Copyright 2022 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#ifndef POLICY_H
+#define	POLICY_H
+
+/* Set this to 0x0 to leave the default SMMU page size in sACR
+ * Set this to 0x1 to change the SMMU page size to 64K
+ */
+#define POLICY_SMMU_PAGESZ_64K 0x1
+
+#endif /* POLICY_H */
